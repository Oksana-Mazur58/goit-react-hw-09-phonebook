{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","redux/contacts/contactsSelectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactItem/ContactItem.js","components/ContactList/ContactList.js","views/ContactsView/ContactsView.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","getFilter","state","filter","getLoader","loading","getFilteredContacts","createSelector","contacts","name","toLowerCase","includes","ContactForm","dispatch","useDispatch","useState","setName","number","setNumber","useSelector","handleChange","target","reset","onSubmit","e","preventDefault","find","contact","alert","contactsOperations","addContact","className","type","onChange","Filter","contactsActions","changeFilter","ContactItem","defaultProps","ContactsList","isLoadingContacts","useEffect","fetchContacts","map","id","onClick","deleteContact","ContactsView"],"mappings":"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","file":"static/js/3.e598b931.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getAllContacts = state => state.contacts;\nexport const getFilter = state => state.filter;\nexport const getLoader = state => state.loading;\n\nexport const getFilteredContacts = createSelector([getAllContacts, getFilter],\n    ({ contacts, filter }) => {\n        return contacts.filter(({ name }) => name.toLowerCase().includes(filter.toLowerCase()));\n    });","import React, { useState } from 'react';\nimport './ContactForm.scss'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactsOperations } from '../../redux/contacts'\nimport { getFilteredContacts } from '../../redux/contacts/contactsSelectors'\nimport '../../styles/base.scss';\n\nexport default function ContactForm() {\n    const dispatch = useDispatch();\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n    const contacts = useSelector(getFilteredContacts);\n\n    const handleChange = ({ target: { name, value } }) => {\n        switch (name) {\n            case 'name':\n                setName(value);\n                break;\n\n            case 'number':\n                setNumber(value);\n                break;\n            default:\n                return\n        }\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (name !== '' && number !== '') {\n            contacts.find(contact => contact.number === number)\n                ? alert(`this ${number} is already exist`)\n                : dispatch(contactsOperations.addContact(name, number));\n            reset();\n        } else { alert('Please fill empty fields') }\n    };\n\n    const reset = () => {\n        setName('');\n        setNumber('');\n    }\n\n    return (<form onSubmit={handleSubmit} className='contacts-form'>\n        <label className='label'>\n            Name<input\n                type=\"text\"\n                value={name}\n                onChange={handleChange}\n                name=\"name\"\n                className='input' />\n        </label>\n        <label className='label'>\n            Number<input\n                type=\"tel\"\n                value={number}\n                onChange={handleChange}\n                name=\"number\"\n                className='input' />\n        </label>\n        <button type=\"submit\" className='button contacts-form__button'>Add contact</button>\n    </form>);\n};\n\n\n\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactsActions } from '../../redux/contacts';\nimport { getFilter } from '../../redux/contacts/contactsSelectors';\nimport '../../styles/base.scss';\n\nexport default function Filter() {\n    const dispatch = useDispatch();\n    const value = useSelector(getFilter);\n\n    const onChange = (e) => dispatch(contactsActions.changeFilter(e.target.value));\n\n    return (\n        <label className='label'>\n            Find contact by name\n            <input\n                type=\"text\"\n                value={value}\n                onChange={onChange}\n                className='input' />\n        </label>\n    );\n};\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './ContactItem.scss'\n\nconst ContactItem = ({ name, number }) => {\n    return (<>\n        <span className='contact-name'>{name}: </span>\n        <span className='contact-number'>{number}</span>\n    </>);\n};\n\nContactItem.propTypes = {\n    name: PropTypes.string,\n    number: PropTypes.string\n}\n\nContactItem.defaultProps = {\n    name: \"Mickey Mouse\",\n    number: 123456789\n};\n\nexport default ContactItem;","import React, { useEffect } from 'react';\nimport ContactItem from '../ContactItem';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactsOperations } from '../../redux/contacts'\nimport { getLoader, getFilteredContacts } from '../../redux/contacts/contactsSelectors'\nimport '../../styles/base.scss'\nimport './ContactList.scss';\n\nexport default function ContactsList() {\n    const dispatch = useDispatch();\n    const contacts = useSelector(getFilteredContacts);\n    const isLoadingContacts = useSelector(getLoader);\n\n    useEffect(() => {\n        dispatch(contactsOperations.fetchContacts());\n    }, [dispatch]);\n\n    const onClick = (id) => dispatch(contactsOperations.deleteContact(id));\n\n    return (<>\n        {isLoadingContacts && <h1>Loading...</h1>}\n        <ul className='contact-list'>\n            {contacts.map(({ id, name, number }) => {\n                return (<li key={id} className='contact-item'><ContactItem\n                    name={name}\n                    number={number} />\n                    <button type='button'\n                        onClick={() => { onClick(id) }} className='button contact-item__button'>Delete</button>\n                </li>)\n            })}\n        </ul>\n    </>)\n};\n","import React from 'react';\nimport ContactForm from '../../components/ContactForm';\nimport Filter from '../../components/Filter';\nimport ContactsList from '../../components/ContactList'\n\nconst ContactsView = () => (\n    <>\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactsList />\n    </>);\n\nexport default ContactsView;"],"sourceRoot":""}